{
	"editor.indentSize": "tabSize",
	"editor.tabSize": 4,

	"files.associations": {
		"*.log": "vt100",
		"*.mod": "plaintext",
		"*.ahk": "ahk",
		"*.mcfunction": "ignore",
		"Kconfig": "shellscript",
		"Kconfig.projbuild": "shellscript",
		"typeinfo": "cpp",
		"array": "cpp",
		"deque": "cpp",
		"list": "cpp",
		"string": "cpp",
		"unordered_map": "cpp",
		"vector": "cpp",
		"string_view": "cpp",
		"initializer_list": "cpp",
		"*.tcc": "cpp",
		"fstream": "cpp",
		"istream": "cpp",
		"ostream": "cpp",
		"sstream": "cpp",
		"cstring": "cpp",
		"random": "cpp",
		"atomic": "cpp",
		"cctype": "cpp",
		"chrono": "cpp",
		"cinttypes": "cpp",
		"clocale": "cpp",
		"cmath": "cpp",
		"codecvt": "cpp",
		"condition_variable": "cpp",
		"csignal": "cpp",
		"cstdarg": "cpp",
		"cstddef": "cpp",
		"cstdint": "cpp",
		"cstdio": "cpp",
		"cstdlib": "cpp",
		"ctime": "cpp",
		"cwchar": "cpp",
		"cwctype": "cpp",
		"exception": "cpp",
		"algorithm": "cpp",
		"functional": "cpp",
		"iterator": "cpp",
		"map": "cpp",
		"memory": "cpp",
		"memory_resource": "cpp",
		"numeric": "cpp",
		"optional": "cpp",
		"ratio": "cpp",
		"set": "cpp",
		"system_error": "cpp",
		"tuple": "cpp",
		"type_traits": "cpp",
		"utility": "cpp",
		"future": "cpp",
		"iosfwd": "cpp",
		"limits": "cpp",
		"mutex": "cpp",
		"new": "cpp",
		"stdexcept": "cpp",
		"streambuf": "cpp",
		"thread": "cpp",
		"esp_system.h": "c",
		"iostream": "cpp",
		"i2c_types.h": "c",
		"esp_log.h": "c",
		"i2c_master.h": "c",
		"stdbool.h": "c",
		"ll_cam.h": "c",
		"cam_hal.h": "c"
	},
	"cSpell.words": [
		"ALPHABITFIELDS",
		"APSTA",
		"astype",
		"authmode",
		"AUTOUP",
		"BITMAPFILEHEADER",
		"BITMAPINFOHEADER",
		"BITMAPV",
		"cmpr",
		"CMYKRLE",
		"colorbar",
		"continously",
		"dataavailable",
		"denoise",
		"DGRAM",
		"dhcpc",
		"dhcps",
		"Digi",
		"dstack",
		"dtype",
		"Espressif",
		"fourcc",
		"framesize",
		"frombuffer",
		"gainceiling",
		"GARP",
		"getch",
		"hflip",
		"hmirror",
		"HQVGA",
		"HVGA",
		"ifkey",
		"imdecode",
		"IMREAD",
		"imshow",
		"imwrite",
		"INFOHEADER",
		"ipcx",
		"IRAM",
		"jsmn",
		"jsmntok",
		"kbhit",
		"Kconfig",
		"lastptr",
		"ledc",
		"lenc",
		"libdeps",
		"LOGD",
		"LOGI",
		"LOGV",
		"LOGW",
		"MACSTR",
		"matroska",
		"mcpwm",
		"MJPEG",
		"netif",
		"netsh",
		"OPMODE",
		"PCLK",
		"PIXFORMAT",
		"platformio",
		"PSRAM",
		"PWDN",
		"QCIF",
		"QQVGA",
		"QSXGA",
		"QVGA",
		"QXGA",
		"rssi",
		"sccb",
		"sdkconfig",
		"setoperatingmode",
		"setservername",
		"SIOD",
		"SNTP",
		"SOFTAP",
		"SRAM",
		"SRCS",
		"SSID",
		"STACONNECTED",
		"stadisconnect",
		"STADISCONNECTED",
		"strncpy",
		"SXGA",
		"SXGy",
		"TOADDR",
		"toggleable",
		"toksuper",
		"UXGA",
		"vflip",
		"vmirror",
		"WASD",
		"whitebal",
		"wlan",
		"WQXGA",
		"WROVER",
		"XCLK"
	],

	// Avoid VS Code file explorer expanding on some folders
	"explorer.autoRevealExclude": {
		"**/.venv": true,
		"**/.pio": true,
		"**/components": true,
		"**/managed_components": true,
		"**/libs": true,
		"**/logs": true,
		"**/private/capture": true
	},

	// Fix to make `pio run -t menuconfig` work properly
	"terminal.integrated.windowsEnableConpty": false,

	// Hide Git submodules (used as dependencies, in `libs/` folder)
	"git.detectSubmodules": false,

	// Improve searching experience
	"search.useIgnoreFiles": false,
	"search.exclude": {
		// Defaults in VS Code
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true,
		// More, specific to this project
		"**/.venv": true,
		"**/.pio": true,
		"**/logs": true,
		"**/private/capture": true,
		// Platform specific code other than the one used
		"**/components/espressif__esp32-camera/target/esp32s2": true,
		"**/components/espressif__esp32-camera/target/esp32s3": true,
	},

	// Fix PlatformIO toolbar "Upload" as without serial monitor, 
	// since the board/programmator requires manual boot mode selection, 
	// can't jump into monitor after upload without power off, switch and on.
	"platformio-ide.toolbar": [
		{
			"text": "$(check)",
			"tooltip": "PlatformIO: Build",
			"commands": "platformio-ide.build"
		},
		{
			"text": "$(arrow-right)",
			"tooltip": "PlatformIO: Upload",
			"commands": "platformio-ide.upload"
		},
		{
			"text": "$(trashcan)",
			"tooltip": "PlatformIO: Clean",
			"commands": "platformio-ide.clean"
		},
		{
			"text": "$(plug)",
			"tooltip": "PlatformIO: Serial Monitor",
			"commands": "platformio-ide.serialMonitor"
		},
		{
			"text": "$(terminal)",
			"tooltip": "PlatformIO: New Terminal",
			"commands": "platformio-ide.newTerminal"
		}
	],
}